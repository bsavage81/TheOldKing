import logging
import os
from peewee import AutoField, Model, IntegerField, TextField, SqliteDatabase, BigIntegerField, BooleanField, TimestampField, \
    MySQLDatabase
from flask import Flask
from dotenv import load_dotenv

from core.logging_module import get_log

load_dotenv()

DB_IP = os.getenv('database_ip')
DB_Port = os.getenv('database_port')
DB_user = os.getenv('database_username')
DB_password = os.getenv('database_password')
DB_Database = os.getenv('database_schema')

# db = SqliteDatabase("data.db", pragmas={'foreign_keys': 1})
db = MySQLDatabase(DB_Database, user=DB_user, password=DB_password,host=DB_IP, port=int(DB_Port))

_log = get_log(__name__)


def iter_table(model_dict):
    """Iterates through a dictionary of tables, confirming they exist and creating them if necessary."""
    for key in model_dict:
        if not db.table_exists(key):
            db.connect(reuse_if_open=True)
            db.create_tables([model_dict[key]])
            _log.debug(f"Created table '{key}'")
            db.close()


class BaseModel(Model):
    """Base Model class used for creating new tables."""

    class Meta:
        database = db


class BotData(BaseModel):
    """
    BotData:
    Information used across the bot.

    `id`: AutoField()
    Database Entry ID (ALWAYS QUERY 1)

    `last_question_posted`: DateTimeField()
    Last time a question was posted

    `persistent_views`: BooleanField()
    Whether or not persistent views are enabled

    `prefix`: TextField()
    Bot prefix

    `blacklist_response_channel`: BigIntegerField()
    Channel ID for blacklist responses

    `question_suggest_channel`: BigIntegerField()
    Channel ID for question suggestions

    `bot_spam_channel`: BigIntegerField()
    Channel ID for bot spam

    `realm_channel_response`: BigIntegerField()
    Channel ID for realm channel responses

    `bot_type`: TextField()
    Bot type

    `other_bot_id`: BigIntegerField()
    Other bot ID

    `bot_id`: BigIntegerField()
    Bot ID

    `server_id`: BigIntegerField()
    Server ID
    """
    id = AutoField()
    persistent_views = BooleanField(default=False)
    prefix = TextField(default=">")
    bot_spam_channel_coastal = BigIntegerField(default=0)
    bot_spam_channel_aurafall = BigIntegerField(default=0)
    bot_type = TextField(default="Stable")
    bot_id = BigIntegerField(default=0)
    server_id_aurafall = BigIntegerField(default=0)
    server_id_coastal = BigIntegerField(default=0)

class Administrators(BaseModel):
    """
    Administrators:
    List of users who are whitelisted on the bot.

    `id`: AutoField()
    Database Entry

    `discordID`: BigIntegerField()
    Discord ID

    `TierLevel`: IntegerField()
    TIER LEVEL

    1 - Bot Manager\n
    2 - Admin\n
    3 - Sudo Admin\n
    4 - Owner
    """

    id = AutoField()
    discordID = BigIntegerField(unique=True)
    TierLevel = IntegerField(default=1)

app = Flask(__name__)


# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    db.connect()


# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not db.is_closed():
        db.close()


tables = {
    "administrators": Administrators,
    "botdata": BotData
}
iter_table(tables)
